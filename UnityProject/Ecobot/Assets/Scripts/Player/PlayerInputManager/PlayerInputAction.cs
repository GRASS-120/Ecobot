//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Scripts/Player/PlayerInputManager/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""DefaultMode"",
            ""id"": ""de339ef5-21b2-4147-9c94-cb516524e930"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""25dea6ae-b0d0-490d-9216-5bcf0d283bc5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""422b50a5-1039-4d0e-a736-b7aa240fcd98"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ToggleBuildMode"",
                    ""type"": ""Button"",
                    ""id"": ""4c680bf1-8cca-436b-9bf7-d2aae6ff9b38"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseScroll"",
                    ""type"": ""Value"",
                    ""id"": ""d0aca384-e5a0-47a0-8e18-768405c6c55b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""Value"",
                    ""id"": ""0590fc1a-5a8f-4e65-9d83-20b0ef1ba9a3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""454e29f5-25f1-46be-8b5c-793a3b348a9b"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""22e8ae4d-845c-49b5-9b5a-aa628f94b7c4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1802b024-0efc-4292-b507-93c6140a5573"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a46c2272-30f3-45b3-b93d-c7cfb32b6411"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ad40b95c-4da8-4a82-b91a-1c0f4289e864"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d5fc0fb1-fa14-4dbd-b6b6-c3e6e8bb824e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a640cb4b-67df-44a2-86b5-1a16eedd9bcd"",
                    ""path"": ""<Keyboard>/f3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleBuildMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a39f8c85-5163-46cd-9f15-6de114f03f9a"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45b6c044-55ba-41e5-9ce7-5ac86a377847"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BuildingMode"",
            ""id"": ""8cb0a1c9-2766-4cea-9172-20fc4607ccc7"",
            ""actions"": [
                {
                    ""name"": ""DemountBuilding"",
                    ""type"": ""Button"",
                    ""id"": ""6b3377f3-2145-4a30-a82e-448368970d05"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateBuilding"",
                    ""type"": ""Button"",
                    ""id"": ""8ad0dcfd-109b-4bea-a503-d5c98dd55ebb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a4f8c522-ae80-4d3e-bbc5-19d657c5d75b"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DemountBuilding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""426d4cee-5271-44c1-b556-22e3b3b439d9"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateBuilding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ProgrammingMode"",
            ""id"": ""5c44e411-b9bf-4976-9e6a-d9a730737d92"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""5f030627-6b65-4f6a-8cb0-215caedce006"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7b0beac5-8d57-420f-8b03-b087a46767d1"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InterfaceMode"",
            ""id"": ""97fe80da-bbac-4cf8-bec7-c2db66ca47da"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""2a39bdb4-422a-40c6-b74b-31932faab7d9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9f0b8574-49d1-431b-b1b8-b40142234d81"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MenuMode"",
            ""id"": ""870ad45a-f57a-41a8-83aa-a5cc65d51e4c"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""42689c30-7356-491d-acd7-564992793ea3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3761d56a-83f8-4a26-bcdc-f2b86096e413"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory"",
            ""id"": ""9fb5fb60-c21a-46ba-956f-cd260baf9c9d"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""57bd5d45-2930-4c7f-9ead-289e6b865d11"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e5a25f74-0178-475c-9647-ea3d271a0253"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DefaultMode
        m_DefaultMode = asset.FindActionMap("DefaultMode", throwIfNotFound: true);
        m_DefaultMode_MousePosition = m_DefaultMode.FindAction("MousePosition", throwIfNotFound: true);
        m_DefaultMode_Movement = m_DefaultMode.FindAction("Movement", throwIfNotFound: true);
        m_DefaultMode_ToggleBuildMode = m_DefaultMode.FindAction("ToggleBuildMode", throwIfNotFound: true);
        m_DefaultMode_MouseScroll = m_DefaultMode.FindAction("MouseScroll", throwIfNotFound: true);
        m_DefaultMode_MouseDelta = m_DefaultMode.FindAction("MouseDelta", throwIfNotFound: true);
        // BuildingMode
        m_BuildingMode = asset.FindActionMap("BuildingMode", throwIfNotFound: true);
        m_BuildingMode_DemountBuilding = m_BuildingMode.FindAction("DemountBuilding", throwIfNotFound: true);
        m_BuildingMode_RotateBuilding = m_BuildingMode.FindAction("RotateBuilding", throwIfNotFound: true);
        // ProgrammingMode
        m_ProgrammingMode = asset.FindActionMap("ProgrammingMode", throwIfNotFound: true);
        m_ProgrammingMode_Newaction = m_ProgrammingMode.FindAction("New action", throwIfNotFound: true);
        // InterfaceMode
        m_InterfaceMode = asset.FindActionMap("InterfaceMode", throwIfNotFound: true);
        m_InterfaceMode_Newaction = m_InterfaceMode.FindAction("New action", throwIfNotFound: true);
        // MenuMode
        m_MenuMode = asset.FindActionMap("MenuMode", throwIfNotFound: true);
        m_MenuMode_Newaction = m_MenuMode.FindAction("New action", throwIfNotFound: true);
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory_Newaction = m_Inventory.FindAction("New action", throwIfNotFound: true);
    }

    ~@PlayerInputAction()
    {
        UnityEngine.Debug.Assert(!m_DefaultMode.enabled, "This will cause a leak and performance issues, PlayerInputAction.DefaultMode.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_BuildingMode.enabled, "This will cause a leak and performance issues, PlayerInputAction.BuildingMode.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_ProgrammingMode.enabled, "This will cause a leak and performance issues, PlayerInputAction.ProgrammingMode.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_InterfaceMode.enabled, "This will cause a leak and performance issues, PlayerInputAction.InterfaceMode.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_MenuMode.enabled, "This will cause a leak and performance issues, PlayerInputAction.MenuMode.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Inventory.enabled, "This will cause a leak and performance issues, PlayerInputAction.Inventory.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DefaultMode
    private readonly InputActionMap m_DefaultMode;
    private List<IDefaultModeActions> m_DefaultModeActionsCallbackInterfaces = new List<IDefaultModeActions>();
    private readonly InputAction m_DefaultMode_MousePosition;
    private readonly InputAction m_DefaultMode_Movement;
    private readonly InputAction m_DefaultMode_ToggleBuildMode;
    private readonly InputAction m_DefaultMode_MouseScroll;
    private readonly InputAction m_DefaultMode_MouseDelta;
    public struct DefaultModeActions
    {
        private @PlayerInputAction m_Wrapper;
        public DefaultModeActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_DefaultMode_MousePosition;
        public InputAction @Movement => m_Wrapper.m_DefaultMode_Movement;
        public InputAction @ToggleBuildMode => m_Wrapper.m_DefaultMode_ToggleBuildMode;
        public InputAction @MouseScroll => m_Wrapper.m_DefaultMode_MouseScroll;
        public InputAction @MouseDelta => m_Wrapper.m_DefaultMode_MouseDelta;
        public InputActionMap Get() { return m_Wrapper.m_DefaultMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultModeActions set) { return set.Get(); }
        public void AddCallbacks(IDefaultModeActions instance)
        {
            if (instance == null || m_Wrapper.m_DefaultModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefaultModeActionsCallbackInterfaces.Add(instance);
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @ToggleBuildMode.started += instance.OnToggleBuildMode;
            @ToggleBuildMode.performed += instance.OnToggleBuildMode;
            @ToggleBuildMode.canceled += instance.OnToggleBuildMode;
            @MouseScroll.started += instance.OnMouseScroll;
            @MouseScroll.performed += instance.OnMouseScroll;
            @MouseScroll.canceled += instance.OnMouseScroll;
            @MouseDelta.started += instance.OnMouseDelta;
            @MouseDelta.performed += instance.OnMouseDelta;
            @MouseDelta.canceled += instance.OnMouseDelta;
        }

        private void UnregisterCallbacks(IDefaultModeActions instance)
        {
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @ToggleBuildMode.started -= instance.OnToggleBuildMode;
            @ToggleBuildMode.performed -= instance.OnToggleBuildMode;
            @ToggleBuildMode.canceled -= instance.OnToggleBuildMode;
            @MouseScroll.started -= instance.OnMouseScroll;
            @MouseScroll.performed -= instance.OnMouseScroll;
            @MouseScroll.canceled -= instance.OnMouseScroll;
            @MouseDelta.started -= instance.OnMouseDelta;
            @MouseDelta.performed -= instance.OnMouseDelta;
            @MouseDelta.canceled -= instance.OnMouseDelta;
        }

        public void RemoveCallbacks(IDefaultModeActions instance)
        {
            if (m_Wrapper.m_DefaultModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefaultModeActions instance)
        {
            foreach (var item in m_Wrapper.m_DefaultModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefaultModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefaultModeActions @DefaultMode => new DefaultModeActions(this);

    // BuildingMode
    private readonly InputActionMap m_BuildingMode;
    private List<IBuildingModeActions> m_BuildingModeActionsCallbackInterfaces = new List<IBuildingModeActions>();
    private readonly InputAction m_BuildingMode_DemountBuilding;
    private readonly InputAction m_BuildingMode_RotateBuilding;
    public struct BuildingModeActions
    {
        private @PlayerInputAction m_Wrapper;
        public BuildingModeActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @DemountBuilding => m_Wrapper.m_BuildingMode_DemountBuilding;
        public InputAction @RotateBuilding => m_Wrapper.m_BuildingMode_RotateBuilding;
        public InputActionMap Get() { return m_Wrapper.m_BuildingMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildingModeActions set) { return set.Get(); }
        public void AddCallbacks(IBuildingModeActions instance)
        {
            if (instance == null || m_Wrapper.m_BuildingModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BuildingModeActionsCallbackInterfaces.Add(instance);
            @DemountBuilding.started += instance.OnDemountBuilding;
            @DemountBuilding.performed += instance.OnDemountBuilding;
            @DemountBuilding.canceled += instance.OnDemountBuilding;
            @RotateBuilding.started += instance.OnRotateBuilding;
            @RotateBuilding.performed += instance.OnRotateBuilding;
            @RotateBuilding.canceled += instance.OnRotateBuilding;
        }

        private void UnregisterCallbacks(IBuildingModeActions instance)
        {
            @DemountBuilding.started -= instance.OnDemountBuilding;
            @DemountBuilding.performed -= instance.OnDemountBuilding;
            @DemountBuilding.canceled -= instance.OnDemountBuilding;
            @RotateBuilding.started -= instance.OnRotateBuilding;
            @RotateBuilding.performed -= instance.OnRotateBuilding;
            @RotateBuilding.canceled -= instance.OnRotateBuilding;
        }

        public void RemoveCallbacks(IBuildingModeActions instance)
        {
            if (m_Wrapper.m_BuildingModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBuildingModeActions instance)
        {
            foreach (var item in m_Wrapper.m_BuildingModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BuildingModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BuildingModeActions @BuildingMode => new BuildingModeActions(this);

    // ProgrammingMode
    private readonly InputActionMap m_ProgrammingMode;
    private List<IProgrammingModeActions> m_ProgrammingModeActionsCallbackInterfaces = new List<IProgrammingModeActions>();
    private readonly InputAction m_ProgrammingMode_Newaction;
    public struct ProgrammingModeActions
    {
        private @PlayerInputAction m_Wrapper;
        public ProgrammingModeActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_ProgrammingMode_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_ProgrammingMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ProgrammingModeActions set) { return set.Get(); }
        public void AddCallbacks(IProgrammingModeActions instance)
        {
            if (instance == null || m_Wrapper.m_ProgrammingModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ProgrammingModeActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IProgrammingModeActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IProgrammingModeActions instance)
        {
            if (m_Wrapper.m_ProgrammingModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IProgrammingModeActions instance)
        {
            foreach (var item in m_Wrapper.m_ProgrammingModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ProgrammingModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ProgrammingModeActions @ProgrammingMode => new ProgrammingModeActions(this);

    // InterfaceMode
    private readonly InputActionMap m_InterfaceMode;
    private List<IInterfaceModeActions> m_InterfaceModeActionsCallbackInterfaces = new List<IInterfaceModeActions>();
    private readonly InputAction m_InterfaceMode_Newaction;
    public struct InterfaceModeActions
    {
        private @PlayerInputAction m_Wrapper;
        public InterfaceModeActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_InterfaceMode_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_InterfaceMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InterfaceModeActions set) { return set.Get(); }
        public void AddCallbacks(IInterfaceModeActions instance)
        {
            if (instance == null || m_Wrapper.m_InterfaceModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InterfaceModeActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IInterfaceModeActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IInterfaceModeActions instance)
        {
            if (m_Wrapper.m_InterfaceModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInterfaceModeActions instance)
        {
            foreach (var item in m_Wrapper.m_InterfaceModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InterfaceModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InterfaceModeActions @InterfaceMode => new InterfaceModeActions(this);

    // MenuMode
    private readonly InputActionMap m_MenuMode;
    private List<IMenuModeActions> m_MenuModeActionsCallbackInterfaces = new List<IMenuModeActions>();
    private readonly InputAction m_MenuMode_Newaction;
    public struct MenuModeActions
    {
        private @PlayerInputAction m_Wrapper;
        public MenuModeActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_MenuMode_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_MenuMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuModeActions set) { return set.Get(); }
        public void AddCallbacks(IMenuModeActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuModeActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IMenuModeActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IMenuModeActions instance)
        {
            if (m_Wrapper.m_MenuModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuModeActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuModeActions @MenuMode => new MenuModeActions(this);

    // Inventory
    private readonly InputActionMap m_Inventory;
    private List<IInventoryActions> m_InventoryActionsCallbackInterfaces = new List<IInventoryActions>();
    private readonly InputAction m_Inventory_Newaction;
    public struct InventoryActions
    {
        private @PlayerInputAction m_Wrapper;
        public InventoryActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Inventory_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        public void AddCallbacks(IInventoryActions instance)
        {
            if (instance == null || m_Wrapper.m_InventoryActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InventoryActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IInventoryActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInventoryActions instance)
        {
            foreach (var item in m_Wrapper.m_InventoryActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InventoryActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InventoryActions @Inventory => new InventoryActions(this);
    public interface IDefaultModeActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnToggleBuildMode(InputAction.CallbackContext context);
        void OnMouseScroll(InputAction.CallbackContext context);
        void OnMouseDelta(InputAction.CallbackContext context);
    }
    public interface IBuildingModeActions
    {
        void OnDemountBuilding(InputAction.CallbackContext context);
        void OnRotateBuilding(InputAction.CallbackContext context);
    }
    public interface IProgrammingModeActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IInterfaceModeActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IMenuModeActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IInventoryActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
